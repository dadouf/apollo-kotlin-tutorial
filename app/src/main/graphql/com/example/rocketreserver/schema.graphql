schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  createProjectById(input: CreateProject!): Project
  createProjectMemberById(input: CreateProjectMember!): ProjectMember
  createUserById(input: CreateUser!): User
  deleteProjectById(input: DeleteProject!): Project
  deleteProjectMemberById(input: DeleteProjectMember!): ProjectMember
  deleteUserById(input: DeleteUser!): User
  updateProjectById(input: UpdateProject!): Project
  updateProjectMemberById(input: UpdateProjectMember!): ProjectMember
  updateUserById(input: UpdateUser!): User
}

type Project {
  createdDate: AWSDateTime
  description: String
  id: ID
  modifiedDate: AWSDateTime
  name: String
  projectStart: AWSDate
}

type ProjectIterator {
  items: [Project]
  nextToken: String
}

type ProjectMember {
  createdDate: AWSDateTime
  id: ID
  modifiedDate: AWSDateTime
  projectId: ID
  role: ProjectRole
  userId: ID
}

type ProjectMemberEntry {
  name: String
  projectStart: AWSDate
  role: ProjectRole
}

type ProjectMemberIterator {
  items: [ProjectMember]
  nextToken: String
}

type ProjectMemberList {
  members: [ProjectMemberEntry]
}

type PubNubData {
  eTag: String
  email: String
  externalId: String
  id: String!
  name: String
  profileUrl: String
  updated: AWSDateTime
}

type PubNubIterator {
  data: [PubNubData]
  status: Int
}

type Query {
  getMembersOfProject(id: ID!): ProjectMemberList
  getPong: String
  getProjectById(id: ID!): Project
  getProjectMemberById(id: ID!): ProjectMember
  getProjectMembers(filter: ProjectMemberFilter, limit: Int, nextToken: String): ProjectMemberIterator
  getProjects(filter: ProjectFilter, limit: Int, nextToken: String): ProjectIterator
  getProjectsForUsers(id: ID!): UserProjectList
  getPubNubUUID: PubNubIterator
  getUserById(id: ID!): User
  getUsers(filter: UserFilter, limit: Int, nextToken: String): UserIterator
}

type User {
  createdDate: AWSDateTime
  email: AWSEmail
  id: ID
  modifiedDate: AWSDateTime
  name: String
  projects: [UserProjectEntry]
}

type UserIterator {
  nextToken: String
  users: [User]
}

type UserProjectEntry {
  name: String
  projectStart: String
  role: ProjectRole
}

type UserProjectList {
  projects: [UserProjectEntry]
}

enum ProjectRole {
  BUSINESSMANAGER
  CREATOR
  PROJECTMANAGER
}

input BooleanFilter {
  eq: Boolean
  ne: Boolean
}

input CreateProject {
  description: String
  name: String!
  projectStart: AWSDate!
}

input CreateProjectMember {
  projectId: ID!
  role: ProjectRole!
  userId: ID!
}

input CreateUser {
  email: AWSEmail!
  name: String!
}

input DeleteProject {
  id: ID!
}

input DeleteProjectMember {
  id: ID!
}

input DeleteUser {
  id: ID!
}

input FloatFilter {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input IDFilter {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input IntFilter {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input ProjectFilter {
  createdDate: StringFilter
  description: StringFilter
  id: IDFilter
  modifiedDate: StringFilter
  name: StringFilter
  projectStart: StringFilter
}

input ProjectMemberFilter {
  createdDate: StringFilter
  id: IDFilter
  modifiedDate: StringFilter
  projectId: IDFilter
  role: StringFilter
  userId: IDFilter
}

input StringFilter {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateProject {
  description: String
  id: ID!
  name: String
  projectStart: AWSDate
}

input UpdateProjectMember {
  id: ID!
  projectRole: ProjectRole
}

input UpdateUser {
  email: AWSEmail
  id: ID!
  name: String
}

input UserFilter {
  createdDate: StringFilter
  email: StringFilter
  id: IDFilter
  modifiedDate: StringFilter
  name: StringFilter
}
